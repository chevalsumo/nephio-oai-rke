apiVersion: fn.kpt.dev/v1alpha1
kind: StarlarkRun
metadata: # kpt-merge: /generate-values
  name: generate-values
  annotations:
    config.kubernetes.io/local-config: "true"
    internal.kpt.dev/upstream-identifier: fn.kpt.dev|StarlarkRun|default|generate-values
source: "load(\"krmfn.star\", \"krmfn\")\n\ndef set_values(resources):\n  # this package can be cloned manually and used without injection; \n  # in that case base the repository name on the package name\n  for r in resources:\n    if krmfn.match_gvk(r, \"v1\", \"ConfigMap\") and krmfn.match_name(r, \"kptfile.kpt.dev\"):\n      name = r[\"data\"][\"name\"]\n      imsi = r[\"data\"][\"fullImsi\"]\n      nsaaisd = r[\"data\"][\"nssaiSd\"]\n      nssaisst = r[\"data\"][\"nssaiSst\"]\n      dnn = r[\"data\"][\"dnn\"]\n      rfsimulator = r[\"data\"][\"rfSimulator\"]\n\n  for r in resources:\n    if krmfn.match_gvk(r, \"v1\", \"ConfigMap\") and krmfn.match_name(r, name + \"-configmap\"):\n      r[\"data\"][\"fullImsi\"] = imsi\n      r[\"data\"][\"nssaiSd\"] = nsaaisd\n      r[\"data\"][\"nssaiSst\"] = nssaisst\n      r[\"data\"][\"dnn\"] = dnn\n      r[\"data\"][\"rfSimulator\"] = rfsimulator\n\nset_values(ctx.resource_list[\"items\"])"
